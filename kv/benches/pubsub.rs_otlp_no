use anyhow::Result;
use criterion::{
    async_executor::FuturesExecutor, criterion_group, criterion_main, BatchSize, Criterion,
};
// use criterion::{criterion_group, criterion_main, Criterion};
use futures::StreamExt;

use kv::{
    start_client_with_config, start_server_with_config, ClientConfig, CommandRequest, ServerConfig,
    StorageConfig, YamuxCtrl,
};

use rand::prelude::SliceRandom;
use std::time::Duration;
use tokio::net::TcpStream;
use tokio::runtime::Runtime;
use tokio_rustls::client::TlsStream;

use opentelemetry::global::shutdown_tracer_provider;
use opentelemetry::{
    trace::{TraceError, TracerProvider},
    KeyValue,
};
use opentelemetry_otlp::WithExportConfig;
use opentelemetry_sdk::trace::Config;
use opentelemetry_sdk::{trace as sdktrace, Resource};
use opentelemetry_semantic_conventions::resource::SERVICE_NAME;
use tracing::{info, instrument};
use tracing_subscriber::prelude::*;
use tracing_subscriber::Registry;

#[instrument(name = "start_server", skip_all)]
async fn start_server() -> Result<()> {
    let addr = "127.0.0.1:9999";
    let mut config: ServerConfig = toml::from_str(include_str!("../fixtures/server.conf"))?;
    config.general.addr = addr.into();
    config.storage = StorageConfig::MemTable;
    tokio::spawn(async move {
        start_server_with_config(&config).await.unwrap();
    });

    // let span_context = tracing::Span::current()
    //     .context()
    //     .span()
    //     .span_context()
    //     .clone();
    //
    // tokio::spawn(async move {
    //     let cx = Context::new().with_remote_span_context(span_context);
    //     opentelemetry::Context::attach(cx);
    //     start_server_with_config(&config).await.unwrap();
    // });

    // let span = tracing::Span::current();
    //
    // info!("Spawning server task");
    // tokio::spawn(
    //     async move {
    //         if let Err(e) = start_server_with_config(&config).await {
    //             error!("Error in start_server_with_config: {:?}", e);
    //         }
    //         info!("Server task completed");
    //     }
    //     .instrument(span),
    // );

    info!("Exiting start_server function");

    Ok(())
}

async fn connect() -> Result<YamuxCtrl<TlsStream<TcpStream>>> {
    let addr = "127.0.0.1:9999";
    let mut config: ClientConfig = toml::from_str(include_str!("../fixtures/client.conf"))?;
    config.general.addr = addr.into();
    start_client_with_config(&config).await
}

async fn start_subscribers(topic: &'static str) -> Result<()> {
    let mut ctrl = connect().await?;
    let stream = ctrl.open_stream().await?;
    info!("C(subscriber): stream opened");
    let cmd = CommandRequest::new_subscribe(topic.to_string());
    tokio::spawn(async move {
        let mut stream = stream.execute_streaming(&cmd).await.unwrap();
        while let Some(Ok(data)) = stream.next().await {
            drop(data);
        }
    });

    Ok(())
}

async fn start_publishers(topic: &'static str, values: &[&'static str]) -> Result<()> {
    let mut rng = rand::thread_rng();
    let v = values.choose(&mut rng).unwrap();
    let mut ctrl = connect().await.unwrap();
    let mut stream = ctrl.open_stream().await.unwrap();
    info!("C(publisher): stream opened");
    // let mut cmd = CommandRequest::new_publish(topic.to_string(), vec![(*v).into()]);
    // stream.execute_unary(&cmd).await.unwrap();

    let cmd = CommandRequest::new_publish(topic.to_string(), vec![(*v).into()]);
    stream.execute_unary(&cmd).await.unwrap();

    Ok(())
}

fn pubsub(c: &mut Criterion) {
    let rt = Runtime::new().unwrap();

    let values = &["hello", "world", "foo", "bar"];
    let topic = "lobby";

    // 准备服务器和订阅者
    rt.block_on(async {
        eprint!("preparing server and subscribers...");
        start_server().await.unwrap();
        tokio::time::sleep(Duration::from_millis(50)).await;
        for _ in 0..100 {
            start_subscribers(topic).await.unwrap();
            eprint!(".");
        }
        eprintln!("Done!");
    });

    c.bench_function("publishing", |b| {
        b.to_async(&rt)
            .iter(|| async { start_publishers(topic, values).await })
    });
}

// criterion_group! {
//     name = benches;
//     config = Criterion::default().sample_size(10);
//     targets = pubsub
// }
// criterion_main!(benches);

#[tokio::main]
async fn main() {
    let tracer_provider = opentelemetry_otlp::new_pipeline()
        .tracing()
        .with_exporter(
            opentelemetry_otlp::new_exporter()
                .tonic()
                .with_endpoint("http://localhost:4317"),
        )
        .with_trace_config(
            Config::default().with_resource(Resource::new(vec![KeyValue::new(
                SERVICE_NAME,
                "kv-service1",
            )])),
        )
        // .install_batch(runtime::Tokio)
        .install_simple()
        .unwrap();

    opentelemetry::global::set_tracer_provider(tracer_provider.clone());
    let telemetry = tracing_opentelemetry::layer().with_tracer(tracer_provider.tracer("tracer"));
    Registry::default()
        .with(tracing_subscriber::EnvFilter::new("INFO"))
        .with(telemetry)
        .init();

    // // 设置 OpenTelemetry
    // let tracer = opentelemetry_otlp::new_pipeline()
    //     .tracing()
    //     .with_exporter(
    //         opentelemetry_otlp::new_exporter()
    //             .tonic()
    //             .with_endpoint("http://localhost:4317"),
    //     )
    //     .with_trace_config(
    //         trace::config().with_resource(Resource::new(vec![KeyValue::new(
    //             SERVICE_NAME,
    //             "kv-service",
    //         )])),
    //     )
    //     // .install_batch(Tokio)
    //     .install_simple()
    //     .unwrap();
    //
    // let telemetry = tracing_opentelemetry::layer().with_tracer(tracer);
    // tracing_subscriber::registry()
    //     .with(telemetry)
    //     .with(tracing_subscriber::EnvFilter::new("INFO"))
    //     .init();

    // 运行基准测试
    criterion_group!(benches, pubsub);
    criterion_main!(benches);
    // time::sleep(Duration::from_secs(10)).await;
    // let tracer = global::tracer("kv-service");
    // tracer.in_span("main-operation", |cx| {
    //     let span = cx.span();
    //     span.set_attribute(KeyValue::new("my-attribute", "my-value"));
    //     span.add_event(
    //         "Main span event".to_string(),
    //         vec![KeyValue::new("foo", "1")],
    //     );
    //     tracer.in_span("child-operation...", |cx| {
    //         let span = cx.span();
    //         span.add_event("Sub span event", vec![KeyValue::new("bar", "1")]);
    //     });
    // });
    tokio::time::sleep(Duration::from_secs(30)).await;

    // 关闭 tracer provider
    shutdown_tracer_provider();
}
